{"version":3,"sources":["redux/todos/todos-actions.ts","redux/todos/todos-reducer.ts","redux/store.ts","service/fetchApi.js","redux/todos/todos-operation.ts","components/Spinner/loading-selector.js","components/Spinner/StyledComponent.js","components/Spinner/Spinner.js","components/TodoList/todos-selector.ts","components/TodoList/StyledComponent.js","image/cardHeader.jpg","components/TodoList/TodoList.js","components/TodoCreateForm/StyledComponent.js","components/TodoCreateForm/TodoCreateForm.js","components/Filter/Filter.js","components/Stats/Stats.js","app.js","index.tsx","components/Stats/Stats.module.css","components/Filter/Filter.module.css"],"names":["getAllTodoRequest","createAction","getAllTodoSuccess","getAllTodoError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","editTodoRequest","editTodoSuccess","editTodoError","changeFilter","toggleCompleted","todoReducer","createReducer","action","type","_","payload","map","item","completed","state","filter","id","loaderReducer","errorReducer","todoRootReducer","combineReducers","items","loader","error","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","todo","devTools","process","axios","defaults","baseURL","params","per_page","fetchAddItem","post","fetchDeleteItem","delete","fetchEditItem","update","patch","editItem","dispatch","a","response","data","isLoadingValue","Wrapper","styled","div","Spinner","width","height","allTodos","getFilter","getTotalTodoCount","length","getCompletedTodoCount","createSelector","todos","reduce","total","getVisibleTodos","normalizedFilter","toLowerCase","includes","useStyles","makeStyles","root","maxWidth","inputText","marginBottom","fontSize","formButton","CardList","ul","CardItem","li","Checkbox","textarea","input","Form","form","ToDoList","classes","useDispatch","useSelector","useForm","control","handleSubmit","useState","isOpenEditor","setIsOpenEditor","itemsOnEdit","setItemsOnEdit","onSubmit","console","log","Card","className","CardActionArea","CardMedia","component","alt","image","bg_header","title","CardContent","Typography","gutterBottom","variant","checkbox","checked","onChange","actions","createdAt","slice","CardActions","Button","size","color","onClick","deleteItem","handlerEditItem","name","defaultValue","render","value","TextField","label","required","theme","buttonSubmit","ToDoCreateForm","reset","Filter","styles","span","e","target","Stats","container","App","isLoading","useEffect","get","AppRender","ReactDom","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.5e04e6eb.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const getAllTodoRequest = createAction<undefined>('todo/getAllRequest');\nexport const getAllTodoSuccess = createAction<string, string>('todo/getAllSuccess');\nexport const getAllTodoError = createAction<any>('todo/getAllError');\n\nexport const addTodoRequest = createAction<undefined>('todo/addItemRequest');\nexport const addTodoSuccess = createAction<string, string>('todo/addItemSuccess');\nexport const addTodoError = createAction<any>('todo/addItemError');\n\nexport const deleteTodoRequest = createAction<undefined>('todo/deleteItemRequest');\nexport const deleteTodoSuccess = createAction<string, string>('todo/deleteItemSuccess');\nexport const deleteTodoError = createAction<any>('todo/deleteItemError');\n\nexport const editTodoRequest = createAction<undefined>('todo/editItemRequest');\nexport const editTodoSuccess = createAction<string, string>('todo/editItemSuccess');\nexport const editTodoError = createAction<any>('todo/editItemError');\n\nexport const changeFilter = createAction<string, string>('todos/changeFilter');\n\nexport const toggleCompleted = createAction<string, string>('todo/toggleChange');\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport * as action from './todos-actions';\nimport {IItem} from '../../interfaces'\n\nconst todoReducer = createReducer([], {\n  [action.getAllTodoSuccess.type]: (_, action: any) => {\n    \n    return action.payload.map((item: IItem) => {\n      return {\n        ...item,\n        completed: false,\n      };\n    });\n  },\n  [action.addTodoSuccess.type]: (state: IItem[], { payload }: any) => [...state, payload],\n  [action.deleteTodoSuccess.type]: (state: IItem[], { payload }: any) =>\n    state.filter((item: IItem) => item.id !== payload.id),\n  [action.editTodoSuccess.type]: (state: IItem[], { payload }) =>\n    state.map((item: IItem) => (item.id === payload.id ? payload : item)),\n  [action.toggleCompleted.type]: (state: IItem[], { payload }) => {\n    return state.map((item) => {\n      if(item.id === payload){\n        return {\n          ...item,\n          completed: !item.completed\n        }\n      }\n      return item\n    })\n  },\n});\n\nconst loaderReducer = createReducer(false, {\n  [action.getAllTodoRequest.type]: () => true,\n  [action.getAllTodoSuccess.type]: () => false,\n  [action.getAllTodoError.type]: () => false,\n  [action.addTodoRequest.type]: () => true,\n  [action.addTodoSuccess.type]: () => false,\n  [action.addTodoError.type]: () => false,\n  [action.deleteTodoRequest.type]: () => true,\n  [action.deleteTodoSuccess.type]: () => false,\n  [action.deleteTodoError.type]: () => false,\n  [action.editTodoRequest.type]: () => true,\n  [action.editTodoSuccess.type]: () => false,\n  [action.editTodoError.type]: () => false,\n});\n\nconst filter = createReducer('', {\n  [action.changeFilter.type]: (_, { payload }) => payload,\n});\n\nconst errorReducer = createReducer(null, {\n  [action.getAllTodoError.type]: (_, { payload }) => payload,\n  [action.addTodoError.type]: (_, { payload }) => payload,\n  [action.deleteTodoError.type]: (_, { payload }) => payload,\n  [action.editTodoError.type]: (_, { payload }) => payload,\n});\n\n\n\nconst todoRootReducer = combineReducers({\n  items: todoReducer,\n  filter,\n  loader: loaderReducer,\n  error: errorReducer,\n});\n\nexport { todoRootReducer };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { todoRootReducer } from './todos/todos-reducer';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    todo: todoRootReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nexport default store;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://reqres.in/api';\naxios.defaults.params = {\n  per_page: 1,\n};\n\nexport const fetchGetTodo = () => {\n  return axios.get('/users');\n};\n\nexport const fetchAddItem = item => {\n  return axios.post('/users', item);\n};\n\nexport const fetchDeleteItem = item => {\n  return axios.delete(`/users/${item.id}`);\n};\n\nexport const fetchEditItem = (id, update) => {\n  return axios.patch(`/users/${id}`, update);\n};\n\nexport const fetchToggleItem = (id, update) => {\n return axios.patch(`/users/${id}`, update)\n}\n","import * as action from './todos-actions';\nimport {\n  fetchGetTodo,\n  fetchAddItem,\n  fetchDeleteItem,\n  fetchEditItem,\n  \n} from '../../service/fetchApi';\nimport {IItem} from '../../interfaces'\n\nexport const getAllItem = () => async (dispatch: any) => {\n  dispatch(action.getAllTodoRequest());\n  try {\n    const response = await fetchGetTodo();\n    const { data } = response.data;\n    dispatch(action.getAllTodoSuccess(data));\n  } catch (error) {\n    dispatch(action.getAllTodoError(error));\n  }\n};\n\nexport const addItem = (item: string) => async (dispatch: any) => {\n  console.log(\"teeeest\", typeof dispatch, item);\n  \n  dispatch(action.addTodoRequest());\n  try {\n    const { data } = await fetchAddItem(item);\n    data[\"completed\"] = false;\n    dispatch(action.addTodoSuccess(data));\n  } catch (error) {\n    dispatch(action.addTodoError(error));\n  }\n};\n\nexport const deleteItem =( item: any) => async (dispatch: any) => {\n  dispatch(action.deleteTodoRequest());\n  try {\n    const response = await fetchDeleteItem(item);\n    dispatch(action.deleteTodoSuccess(item));\n  } catch (error) {\n    dispatch(action.deleteTodoError(error));\n  }\n};\n\nexport const editItem = (item: IItem) => async (dispatch: any) => {\n  const { todo, id } = item;\n  const update = {\n    todo,\n    id,\n  };\n  dispatch(action.editTodoRequest());\n  try {\n    const response = await fetchEditItem(id, update);\n    const { data } = response;\n    dispatch(action.editTodoSuccess(data));\n  } catch (error) {\n    dispatch(action.editTodoError(error));\n  }\n};\n","export const isLoadingValue = state => state.todo.loader;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n`;\n\nexport { Wrapper };\n","import Loader from 'react-loader-spinner';\nimport { Wrapper } from './StyledComponent';\n\nexport function Spinner() {\n  return (\n    <Wrapper>\n      <Loader width={100} height={75} type=\"Grid\" />\n    </Wrapper>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\nimport {IItem, IFilter} from '../../interfaces'\n\nexport const allTodos =  (state: any) => state.todo.items;\nexport const getFilter =  (state: any ) => state.todo.filter;\n\nexport const getTotalTodoCount = (state: number) => {\n  const todos = allTodos(state);\n  return todos.length - 1;\n};\nexport const getCompletedTodoCount = createSelector([allTodos], todos => {\n  return todos.reduce((total: number, todo: IItem) => (todo.completed ? total + 1 : total), 0);\n});\n\nexport const getVisibleTodos = createSelector(\n  [allTodos, getFilter],\n  (todos, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return filter\n      ? todos.filter(\n          ({ todo, completed }: IItem) =>\n            todo && todo.toLowerCase().includes(normalizedFilter) && completed,\n        )\n      : todos;\n  },\n);\n","import { makeStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: '100%',\n  },\n  inputText: {\n    width: '80%',\n    marginBottom: 20,\n    fontSize: '1.7rem',\n  },\n  formButton: {\n    height: '40px',\n    width: '80%',\n    fontSize: '1.7rem',\n    marginBottom: 10,\n  },\n});\n\nconst CardList = styled.ul`\n  margin: 0 auto;\n  max-width: 1100px;\n  border-radius: 15px;\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n`;\n\n\nconst CardItem = styled.li`\n  position: relative;\n  width: 300px;\n  margin-bottom: 30px;\n  border-radius: 15px;\n  &:not(:last-child) {\n    margin-right: 40px;\n  }\n  transition: 0.3s ease-in;\n  transition-property: box-shadow transform;\n  &:hover {\n    box-shadow: 19px 18px 10px -1px rgba(125, 86, 249, 0.7);\n    transform: translate(5px, 5px);\n  }\n`;\n\nconst TextArea = styled.textarea`\n  width: 80%;\n  height: 90px;\n  resize: none;\n  margin-bottom: 20px;\n  font-size: 1.6rem;\n  outline: none;\n  border: solid 3px #000000;\n  border-radius: 5px;\n  padding: 10px;\n  :focus {\n    border-color: blueviolet;\n  }\n`;\nconst Checkbox = styled.input`\n cursor: pointer;\n  width: 34px;\n  height: 34px;\n  margin-left: 200px;\n`;\nconst Form = styled.form`\n  padding: 20px 0px 20px;\n  position: absolute;\n  bottom: -50px;\n  background-color: rgb(5, 197, 37);\n  border: none;\n  border-radius: 15px;\n  margin: 0 auto 50px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nexport { useStyles, Checkbox, CardItem, CardList, Form, TextArea };\n","export default __webpack_public_path__ + \"static/media/cardHeader.a7c2cc82.jpg\";","import { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { useForm, Controller } from 'react-hook-form';\nimport { TextField } from '@material-ui/core';\nimport { getVisibleTodos } from './todos-selector';\nimport {\n  useStyles,\n  Checkbox,\n  CardItem,\n  CardList,\n  Form,\n} from './StyledComponent';\nimport bg_header from '../../image/cardHeader.jpg';\nimport { deleteItem, editItem } from '../../redux/todos/todos-operation';\nimport * as actions from '../../redux/todos/todos-actions';\n\nexport function ToDoList() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const items = useSelector(getVisibleTodos);\n  const { control, handleSubmit } = useForm();\n  let [isOpenEditor, setIsOpenEditor] = useState(false);\n  let [itemsOnEdit, setItemsOnEdit] = useState(null);\n  const handlerEditItem = item => {\n    setIsOpenEditor(true);\n    setItemsOnEdit(item);\n  };\n\n  const onSubmit = data => {\n    if (!editItem) {\n      return;\n    }\n    data.id = itemsOnEdit.id;\n    console.log(data);\n    dispatch(editItem(data));\n    setIsOpenEditor(false);\n  };\n\n  const handleCheckbox = id => {\n    dispatch(actions.toggleCompleted(id));\n  };\n\n  return (\n    <CardList>\n      {items &&\n        items.map(item => (\n          <>\n            {item.todo && (\n              <CardItem key={item.id}>\n                <Card className={classes.root} >\n                  <CardActionArea>\n                    <CardMedia\n                      component=\"img\"\n                      alt=\"Contemplative Reptile\"\n                      height=\"100\"\n                      image={bg_header}\n                      title=\"Contemplative Reptile\"\n                    />\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                        {item.todo}\n                        <Checkbox\n                          type=\"checkbox\"\n                          className={classes.checkbox}\n                          checked={item.completed}\n                          onChange={() => handleCheckbox(item.id)}\n                        />\n                      </Typography>\n                      {item.createdAt ? <i>was created: {item.createdAt.slice(0,10)}</i>  : <i>was edited few seconds ago</i>}\n                    </CardContent>\n                  </CardActionArea>\n                  <CardActions>\n                    <Button\n                      size=\"large\"\n                      color=\"primary\"\n                      onClick={() => dispatch(deleteItem(item))}\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      size=\"large\"\n                      color=\"primary\"\n                      onClick={() => handlerEditItem(item)}\n                    >\n                      Edit\n                    </Button>\n                  </CardActions>\n                </Card>\n                {isOpenEditor && item.id === itemsOnEdit.id && (\n                  <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Controller\n                      name=\"todo\"\n                      control={control}\n                      defaultValue={item.todo}\n                      render={({ onChange, value }) => (\n                        <TextField\n                          className={classes.inputText}\n                          onChange={onChange}\n                          value={value}\n                          label=\"todo\"\n                          variant=\"outlined\"\n                          required\n                        />\n                      )}\n                    />\n                    <Button\n                      className={classes.formButton}\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      onClick={() => setIsOpenEditor(false)}\n                      className={classes.formButton}\n                      variant=\"contained\"\n                    >\n                      Cancel\n                    </Button>\n                  </Form>\n                )}\n              </CardItem>\n            )}\n          </>\n        ))}\n    </CardList>\n  );\n}\n","import styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  inputText: {\n    width: '80%',\n    marginBottom: 20,\n    fontSize: '1.7rem',\n  },\n  buttonSubmit: {\n    height: '40px',\n    width: '80%',\n    fontSize: '1.7rem',\n  },\n}));\n\nconst TextArea = styled.textarea`\n  width: 80%;\n  height: 100px;\n  resize: none;\n  margin-bottom: 20px;\n  font-size: 1.6rem;\n  outline: none;\n  border: solid 2px #000000;\n  border-radius: 5px;\n  padding: 10px;\n  :focus {\n    border-color: blueviolet;\n  }\n`;\n\nconst Form = styled.form`\n  width: 400px;\n  margin: 0 auto 50px;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-bottom: 50px;\n`;\n\nexport { Form, useStyles, TextArea };\n","import { useDispatch } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport { TextField, Button } from '@material-ui/core';\nimport { Form, useStyles } from './StyledComponent';\nimport { addItem } from '../../redux/todos/todos-operation';\n\nexport function ToDoCreateForm() {\n  const { control, handleSubmit, reset } = useForm();\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    dispatch(addItem(data));\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"todo\"\n        control={control}\n        defaultValue=\"\"\n        render={({ onChange, value }) => (\n          <TextField\n            className={classes.inputText}\n            onChange={onChange}\n            value={value}\n            label=\"todo\"\n            variant=\"outlined\"\n            required\n          />\n        )}\n      />\n      <Button\n        className={classes.buttonSubmit}\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Create\n      </Button>\n    </Form>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../TodoList/todos-selector';\r\nimport { changeFilter } from '../../redux/todos/todos-actions';\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <p className={styles.label}>Filter <span className={styles.span}>But only completed todos!</span></p>\r\n      <input\r\n        type=\"text\"\r\n        className={styles.input}\r\n        value={value}\r\n        onChange={e => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport styles from './Stats.module.css';\r\nimport { getTotalTodoCount, getCompletedTodoCount } from '../TodoList/todos-selector';\r\n\r\nexport default function Stats() {\r\n  const total = useSelector(getTotalTodoCount);\r\n  const completed = useSelector(getCompletedTodoCount);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <p className={styles.item}>\r\n        <span className={styles.value}>{total}</span>\r\n        <span className={styles.label}>Total</span>\r\n      </p>\r\n      <p className={styles.item}>\r\n        <span className={styles.value}>{completed}</span>\r\n        <span className={styles.label}>Completed</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllItem } from './redux/todos/todos-operation';\nimport { Spinner } from './components/Spinner';\nimport { isLoadingValue } from './components/Spinner';\nimport { ToDoList } from './components/TodoList';\nimport { ToDoCreateForm } from './components/TodoCreateForm';\nimport Filter from './components/Filter/Filter';\nimport Stats from './components/Stats/Stats';\nexport default function App() {\n  let isLoading = useSelector(isLoadingValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllItem());\n  }, []);\n\n  return (\n    <>\n    <Filter />\n    <Stats />\n      <ToDoCreateForm />\n      <ToDoList />\n      {isLoading && <Spinner />}\n    </>\n  );\n}\n","import ReactDom from 'react-dom';\nimport '@csstools/normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './base.css';\nimport App from './app';\n\nfunction AppRender() {\n  return (\n    <>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </>\n  );\n}\n\nReactDom.render(<AppRender />, document.querySelector('#root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Stats_container__3926E\",\"item\":\"Stats_item__1l2or\",\"value\":\"Stats_value__2obBD\",\"label\":\"Stats_label__1Elin\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1l5Lz\",\"span\":\"Filter_span__2YSkQ\",\"label\":\"Filter_label__Cu077\",\"input\":\"Filter_input__3EuiE\"};"],"sourceRoot":""}